#!/bin/bash

# Init MacOS OSK Key
OSK="ourhardworkbythesewordsguardedpleasedontsteal(c)AppleComputerInc"

# Locations
imageFolder=~/images
VMFolder=~/VMs
win10_iso=$imageFolder/win10.iso
macos_iso=$imageFolder/BaseSystem.img

dependency_chk(){

    # Checking KVM Compatibility 
    if [[ $(grep -E '(vmx|svm)' /proc/cpuinfo) != 0 ]]
    then
        echo "lol"
        exit 1
    fi

    # Allocating Appropriate RAM to Machines 
    sys_ram=$(awk '/MemTotal/ { printf "%.3f \n", $2/1024 }' /proc/meminfo | cut -d "." -f 1)
    if [[ $sys_ram -lt 4000 ]];then
        alloc_ram=2048
    elif [[ $sys_ram -lt 8000 ]] && [[ $sys_ram -gt 4000 ]];then
        alloc_ram=4096
    elif [[ $sys_ram -lt 12000 ]] && [[ $sys_ram -gt 8000 ]];then
        alloc_ram=6144
    elif [[ $sys_ram -lt 16000 ]] && [[ $sys_ram -gt 12000 ]];then
        alloc_ram=8196
    else
        alloc_ram=10240
    fi

    # VCPU Allocation
    sys_cpu=$(grep -c processor /proc/cpuinfo)
    if [[ $sys_cpu -eq 3 ]];then
            alloc_cpu=2
    elif [[ $sys_cpu -gt 4 ]] && [[ $sys_cpu -lt 9 ]];then
            alloc_cpu=4
    elif [[ $sys_cpu -gt 8 ]] && [[ $sys_cpu -lt 16 ]];then
            alloc_cpu=6
    else
            alloc_cpu=8
    fi
    
    mkdir -p $VMFolder
    mkdir -p $imageFolder


    function dist_chk() {
        if [[ -f /etc/os-release ]]
        then
            source /etc/os-release
            echo $ID
        else
            uname
        fi
    }
    case $(dist_chk) in 
        fedora)
            # Required Packages
            sudo dnf install -y qemu-kvm \
            libvirt \
            virt-install \
            bridge-utils \
            virt-manager \
            libvirt-devel \
            virt-top \
            libguestfs-tools \
            guestfs-tools \
            dmg2img \
            python3-requests \
            python3-click 
            
            # Service Startup
            sudo systemctl start libvirtd
            sudo systemctl enable libvirtd

            ;;
        ubuntu)
            # Required Packages
            sudo apt-get install -y qemu-kvm \
            libvirt-daemon-system \
            libvirt-clients \
            bridge-utils \
            virt-manager \
            virtinst \
            dmg2img \
            python3-requests \
            python3-click 

            # Service Startup
            sudo systemctl enable --now libvirtd
            ;;
        debian)
            # Required Packages
            sudo apt-get install -y qemu-kvm \
            libvirt-clients \
            libvirt-daemon-system \
            bridge-utils \
            virtinst \
            libvirt-daemon \
            virt-manager \
            dmg2img \
            python3-requests \
            python3-click 

            # Service Startup
            sudo systemctl enable --now libvirtd
            ;;
    esac    

    sudo usermod -G libvirt $(whoami)
}

macFetch(){
    # Downloading MacOS DMG and converting to IMG
    if [ ! -f $imageFolder/BaseSystem.img ]; then
        if python3 fetchMacOS.py -o $imageFolder/ "$@"; then
            dmg2img $imageFolder/BaseSystem.dmg $imageFolder/BaseSystem.img
            rm $imageFolder/BaseSystem.dmg
        else
            echo "Failed to download base system"
            exit 1
        fi
    fi	

}

mk_windows10(){
    # Create QCOW2 Base Drive
    if [ ! -f $VMFolder/macos.qcow2 ]; then
        qemu-img create -f qcow2 $VMFolder/win10.qcow2 50G
    fi
    # Create KVM 
    virt-install --name win10 \
    --connect qemu:///system \
    --virt-type kvm \
    --disk path $VMFolder/win10.qcow2 \
    --graphics spice \
    --network network=default \
    --vcpu $alloc_cpu \
    --ram $alloc_ram \
    --cdrom $win10_iso

}

mk_macos(){
    coreCount=$(echo "$alloc_cpu / 2" | bc)
    # Fetching MacOS Image
    fetchMacOS
    # Create QCOW2 Base Drive
    if [ ! -f $VMFolder/macos.qcow2 ]; then
        qemu-img create -f qcow2 $VMFolder/macos.qcow2 64G
    fi    
    # Create KVM
    qemu-system-x86_64 \
        -enable-kvm \
        -m $alloc_ram \
        -machine q35,accel=kvm \
        -smp $alloc_cpu,cores=$coreCount \
        -cpu Penryn,vendor=GenuineIntel,kvm=on,+sse3,+sse4.2,+aes,+xsave,+avx,+xsaveopt,+xsavec,+xgetbv1,+avx2,+bmi2,+smep,+bmi1,+fma,+movbe,+invtsc \
        -device isa-applesmc,osk="$OSK" \
        -smbios type=2 \
        -object rng-random,id=rng0,filename=/dev/urandom -device virtio-rng-pci,rng=rng0 \
        -serial mon:stdio \
        -drive if=pflash,format=raw,readonly,file=/firmware/OVMF_CODE.fd \
        -drive if=pflash,format=raw,file=/firmware/OVMF_VARS-1024x768.fd \
        -device virtio-vga,virgl=on \
        -display sdl,gl=on \
        -L /usr/share/seabios/ \
        -L /usr/lib/ipxe/qemu/ \
        -audiodev pa,id=pa,server="/run/user/$(id -u)/pulse/native" \
        -device ich9-intel-hda -device hda-output,audiodev=pa \
        -usb -device usb-kbd -device usb-mouse \
        -netdev user,id=net0 \
        -device vmxnet3,netdev=net0,id=net0 \
        -drive id=ESP,if=virtio,format=qcow2,file=/ESP.qcow2 \
        -drive id=InstallMedia,format=raw,if=virtio,file=$macos_iso \
        -drive id=SystemDisk,if=virtio,file=/macos.qcow2 \

}

win10_starter(){

    qcowfilesize=$(stat -c %s $VMFolder/macos.qcow2)
    if [ $qcowfilesize -gt 524384 ]; then
        virsh start win10
    else
        mk_windows10
    fi

}

macos_starter(){

    qcowfilesize=$(stat -c %s $VMFolder/macos.qcow2)
    if [ $qcowfilesize -gt 524384 ]; then
        qemu-system-x86_64 \
            -enable-kvm \
            -m $alloc_ram \
            -machine q35,accel=kvm \
            -smp $alloc_cpu,cores=$coreCount \
            -cpu Penryn,vendor=GenuineIntel,kvm=on,+sse3,+sse4.2,+aes,+xsave,+avx,+xsaveopt,+xsavec,+xgetbv1,+avx2,+bmi2,+smep,+bmi1,+fma,+movbe,+invtsc \
            -device isa-applesmc,osk="$OSK" \
            -smbios type=2 \
            -object rng-random,id=rng0,filename=/dev/urandom -device virtio-rng-pci,rng=rng0 \
            -serial mon:stdio \
            -drive if=pflash,format=raw,readonly,file=/firmware/OVMF_CODE.fd \
            -drive if=pflash,format=raw,file=/firmware/OVMF_VARS-1024x768.fd \
            -device virtio-vga,virgl=on \
            -display sdl,gl=on \
            -L /usr/share/seabios/ \
            -L /usr/lib/ipxe/qemu/ \
            -audiodev pa,id=pa,server="/run/user/$(id -u)/pulse/native" \
            -device ich9-intel-hda -device hda-output,audiodev=pa \
            -usb -device usb-kbd -device usb-mouse \
            -netdev user,id=net0 \
            -device vmxnet3,netdev=net0,id=net0 \
            -drive id=ESP,if=virtio,format=qcow2,file=/ESP.qcow2 \
            -drive id=SystemDisk,if=virtio,file=/macos.qcow2
    else
        mk_macos
    fi

}

win10_stopper(){
    virsh shutdown win10
}

macos_stopper(){
    virsh shutdown macos
}

first_run(){

    if ! command -v kat &> /dev/null
    then
        if [[ $(pwd) != "/usr/local/bin" ]];then
            echo "Installing Dependencies"
            dependency_chk
            echo "Installing kat"
            sudo cp kat /usr/local/bin
            sudo cp firmware/ /usr/local/bin
            sudo cp fetchMacOS.py /usr/local/bin
            sudo cp ESP.qcow2 /usr/local/bin
            echo -e "kat has been installed successfully.\nRerun using global kat command\nExample : kat start win10\nInstead of ./kat start win10"
        fi
    if [[ $1 == "--remove" ]];then
        sudo rm /usr/local/bin/kat
        sudo rm /usr/local/bin/fetchMacOS.py
        sudo rm /usr/local/bin/ESP.qcow2
        sudo rm -rf /usr/local/bin/firmware
        echo "kat has been removed successfully"
        exit 0

}

# Main Calling Init

first_run

while test $# -gt 0; do
  case "$1" in
    -h|--help)
      echo -e "kat is a Multi-OS accelerated KVM desktops initializer and manager.\nDeploy using \nWindows 10 - kat start win10\nMacOS - kat start macos"
      ;;
    start)
      shift
      if test $# -gt 0; then
        export machine=$1
        if [[ $machine == "win10" ]];then
            win10_starter
        elif [[ $machine == "macos" ]];then
            macos_starter
        fi
      else
        echo "enter correct vm"
        exit 1
      fi
      shift
      ;;
    stop)
      shift
      if test $# -gt 0; then
        export machine=$1
        if [[ $machine == "win10" ]];then
            win10_stopper
        elif [[ $machine == "macos" ]];then
            macos_stopper
        fi
      else
        echo "no output dir specified"
        exit 1
      fi
      shift
      ;;
    *)
        echo "Enter valid syntax"
        break
      ;;
  esac
done